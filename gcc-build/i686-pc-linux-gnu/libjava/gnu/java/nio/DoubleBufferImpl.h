// DO NOT EDIT THIS FILE - it is machine generated -*- c++ -*-

#ifndef __gnu_java_nio_DoubleBufferImpl__
#define __gnu_java_nio_DoubleBufferImpl__

#pragma interface

#include <java/nio/DoubleBuffer.h>
#include <gcj/array.h>

extern "Java"
{
  namespace java
  {
    namespace nio
    {
      class ByteOrder;
      class DoubleBuffer;
      class ByteBuffer;
    }
  }
  namespace gnu
  {
    namespace java
    {
      namespace nio
      {
        class DoubleBufferImpl;
      }
    }
  }
};

class ::gnu::java::nio::DoubleBufferImpl : public ::java::nio::DoubleBuffer
{
public:
  DoubleBufferImpl (jint, jint, jint);
  DoubleBufferImpl (jdoubleArray, jint, jint);
  DoubleBufferImpl (::gnu::java::nio::DoubleBufferImpl *);
public: // actually package-private
  DoubleBufferImpl (jbyteArray);
private:
  static jbyte nio_get_Byte (::gnu::java::nio::DoubleBufferImpl *, jint, jint);
  static void nio_put_Byte (::gnu::java::nio::DoubleBufferImpl *, jint, jint, jbyte);
public:
  ::java::nio::ByteBuffer *asByteBuffer ();
private:
  static jdoubleArray nio_cast (jbyteArray);
public:
  jboolean isReadOnly () { return readOnly; }
  ::java::nio::DoubleBuffer *slice ();
  ::java::nio::DoubleBuffer *duplicate ();
  ::java::nio::DoubleBuffer *asReadOnlyBuffer ();
  ::java::nio::DoubleBuffer *compact () { return reinterpret_cast< ::java::nio::DoubleBuffer *> (this); }
  jboolean isDirect ();
  jdouble get ();
  ::java::nio::DoubleBuffer *put (jdouble);
  jdouble get (jint);
  ::java::nio::DoubleBuffer *put (jint, jdouble);
  ::java::nio::ByteOrder *order ();
private:
  jboolean __attribute__((aligned(__alignof__( ::java::nio::DoubleBuffer ))))  readOnly;
public:

  static ::java::lang::Class class$;
};

#endif /* __gnu_java_nio_DoubleBufferImpl__ */
