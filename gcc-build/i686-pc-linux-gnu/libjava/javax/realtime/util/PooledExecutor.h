// DO NOT EDIT THIS FILE - it is machine generated -*- c++ -*-

#ifndef __javax_realtime_util_PooledExecutor__
#define __javax_realtime_util_PooledExecutor__

#pragma interface

#include <java/lang/Object.h>
#include <gcj/array.h>

extern "Java"
{
  namespace javax
  {
    namespace realtime
    {
      class Scheduler;
      class ProcessingGroupParameters;
      class MemoryArea;
      class MemoryParameters;
      class ReleaseParameters;
      class SchedulingParameters;
      namespace util
      {
        class PooledExecutor;
        class CountableEventVariable;
        class PooledExecutor$PooledExecutorLogic;
      }
    }
  }
};

class ::javax::realtime::util::PooledExecutor : public ::java::lang::Object
{
public:
  PooledExecutor (jint, ::javax::realtime::SchedulingParameters *, ::javax::realtime::ReleaseParameters *, ::javax::realtime::MemoryParameters *, ::javax::realtime::MemoryArea *, ::javax::realtime::ProcessingGroupParameters *, jboolean);
public: // actually package-private
  virtual void notifyTaskCompletion (::javax::realtime::util::PooledExecutor$PooledExecutorLogic *);
public:
  virtual void execute (::java::lang::Runnable *);
  virtual void shutdown ();
private:
  jboolean active () { return active__; }
  void active (jboolean);
public:
  virtual jboolean addIfFeasible ();
  virtual jboolean addToFeasibility ();
  virtual ::javax::realtime::MemoryParameters *getMemoryParameters () { return memoryParam; }
  virtual void setMemoryParameters (::javax::realtime::MemoryParameters *);
  virtual jboolean setMemoryParametersIfFeasible (::javax::realtime::MemoryParameters *);
  virtual ::javax::realtime::ProcessingGroupParameters *getProcessingGroupParameters () { return groupParam; }
  virtual void setProcessingGroupParameters (::javax::realtime::ProcessingGroupParameters *);
  virtual jboolean setProcessingGroupParametersIfFeasible (::javax::realtime::ProcessingGroupParameters *);
  virtual ::javax::realtime::ReleaseParameters *getReleaseParameters () { return releaseParam; }
  virtual void setReleaseParameters (::javax::realtime::ReleaseParameters *);
  virtual jboolean setReleaseParametersIfFeasible (::javax::realtime::ReleaseParameters *);
  virtual ::javax::realtime::Scheduler *getScheduler () { return scheduler; }
  virtual void setScheduler (::javax::realtime::Scheduler *);
  virtual void setScheduler (::javax::realtime::Scheduler *, ::javax::realtime::SchedulingParameters *, ::javax::realtime::ReleaseParameters *, ::javax::realtime::MemoryParameters *, ::javax::realtime::ProcessingGroupParameters *);
  virtual ::javax::realtime::SchedulingParameters *getSchedulingParameters () { return schedulingParam; }
  virtual void setSchedulingParameters (::javax::realtime::SchedulingParameters *);
  virtual jboolean setSchedulingParametersIfFeasible (::javax::realtime::SchedulingParameters *);
  virtual jboolean removeFromFeasibility ();
  virtual jint executionEligibility ();
  virtual void run () { }
private:
  jint __attribute__((aligned(__alignof__( ::java::lang::Object ))))  executorNum;
  JArray< ::javax::realtime::util::PooledExecutor$PooledExecutorLogic *> *executorPool;
  jint lastExecutorIndex;
  ::javax::realtime::util::CountableEventVariable *executorAvailableEvent;
  jboolean active__;
  ::javax::realtime::SchedulingParameters *schedulingParam;
  ::javax::realtime::ReleaseParameters *releaseParam;
  ::javax::realtime::MemoryParameters *memoryParam;
  ::javax::realtime::MemoryArea *memoryArea;
  ::javax::realtime::ProcessingGroupParameters *groupParam;
  ::javax::realtime::Scheduler *scheduler;
  jint executionEligibility__;
public:

  static ::java::lang::Class class$;
};

#endif /* __javax_realtime_util_PooledExecutor__ */
