// DO NOT EDIT THIS FILE - it is machine generated -*- c++ -*-

#ifndef __java_nio_IntBuffer__
#define __java_nio_IntBuffer__

#pragma interface

#include <java/nio/Buffer.h>
#include <gcj/array.h>

extern "Java"
{
  namespace java
  {
    namespace nio
    {
      class ByteOrder;
      class IntBuffer;
    }
  }
};

class ::java::nio::IntBuffer : public ::java::nio::Buffer
{
public:
  static ::java::nio::IntBuffer *allocateDirect (jint);
  static ::java::nio::IntBuffer *allocate (jint);
  static ::java::nio::IntBuffer *wrap (jintArray, jint, jint);
  static ::java::nio::IntBuffer *wrap (::java::lang::String *);
  static ::java::nio::IntBuffer *wrap (jintArray);
public: // actually package-private
  IntBuffer (jint, jint, jint, jint);
public:
  virtual ::java::nio::IntBuffer *get (jintArray, jint, jint);
  virtual ::java::nio::IntBuffer *get (jintArray);
  virtual ::java::nio::IntBuffer *put (::java::nio::IntBuffer *);
  virtual ::java::nio::IntBuffer *put (jintArray, jint, jint);
  ::java::nio::IntBuffer *put (jintArray);
  jboolean hasArray ();
  jintArray array ();
  jint arrayOffset ();
  virtual jint hashCode ();
  virtual jboolean equals (::java::lang::Object *);
  virtual jint compareTo (::java::lang::Object *);
  virtual ::java::nio::ByteOrder *order () = 0;
  virtual jint get () = 0;
  virtual ::java::nio::IntBuffer *put (jint) = 0;
  virtual jint get (jint) = 0;
  virtual ::java::nio::IntBuffer *put (jint, jint) = 0;
  virtual ::java::nio::IntBuffer *compact () = 0;
  virtual jboolean isDirect () = 0;
  virtual ::java::nio::IntBuffer *slice () = 0;
  virtual ::java::nio::IntBuffer *duplicate () = 0;
  virtual ::java::nio::IntBuffer *asReadOnlyBuffer () = 0;
public:  // actually protected
  jintArray __attribute__((aligned(__alignof__( ::java::nio::Buffer ))))  backing_buffer;
  jint array_offset;
public:

  static ::java::lang::Class class$;
};

#endif /* __java_nio_IntBuffer__ */
