// DO NOT EDIT THIS FILE - it is machine generated -*- c++ -*-

#ifndef __javax_realtime_ThreadedAsyncEventHandler__
#define __javax_realtime_ThreadedAsyncEventHandler__

#pragma interface

#include <javax/realtime/AsyncEventHandler.h>

extern "Java"
{
  namespace javax
  {
    namespace realtime
    {
      class ThreadedAsyncEventHandler;
      class ThreadedAsyncEventHandler$HanderLogic;
      class Scheduler;
      class ProcessingGroupParameters;
      class MemoryArea;
      class SchedulingParameters;
      class ReleaseParameters;
      class MemoryParameters;
    }
  }
};

class ::javax::realtime::ThreadedAsyncEventHandler : public ::javax::realtime::AsyncEventHandler
{
public:
  ThreadedAsyncEventHandler ();
  ThreadedAsyncEventHandler (jboolean);
  ThreadedAsyncEventHandler (::java::lang::Runnable *);
  ThreadedAsyncEventHandler (jboolean, ::java::lang::Runnable *);
  ThreadedAsyncEventHandler (::javax::realtime::SchedulingParameters *, ::javax::realtime::ReleaseParameters *, ::javax::realtime::MemoryParameters *, ::javax::realtime::MemoryArea *, ::javax::realtime::ProcessingGroupParameters *, jboolean);
  ThreadedAsyncEventHandler (::javax::realtime::SchedulingParameters *, ::javax::realtime::ReleaseParameters *, ::javax::realtime::MemoryParameters *, ::javax::realtime::MemoryArea *, ::javax::realtime::ProcessingGroupParameters *, ::java::lang::Runnable *);
  ThreadedAsyncEventHandler (::javax::realtime::SchedulingParameters *, ::javax::realtime::ReleaseParameters *, ::javax::realtime::MemoryParameters *, ::javax::realtime::MemoryArea *, ::javax::realtime::ProcessingGroupParameters *, jboolean, ::java::lang::Runnable *);
  virtual void handleAsyncEvent ();
public:  // actually protected
  virtual void handleAsyncEventImpl ();
public:
  virtual jboolean addIfFeasible ();
  virtual jboolean addToFeasibility ();
  virtual ::javax::realtime::MemoryParameters *getMemoryParameters () { return memoryParam; }
  virtual void setMemoryParameters (::javax::realtime::MemoryParameters *);
  virtual jboolean setMemoryParametersIfFeasible (::javax::realtime::MemoryParameters *);
  virtual ::javax::realtime::ProcessingGroupParameters *getProcessingGroupParameters () { return groupParam; }
  virtual void setProcessingGroupParameters (::javax::realtime::ProcessingGroupParameters *);
  virtual jboolean setProcessingGroupParametersIfFeasible (::javax::realtime::ProcessingGroupParameters *);
  virtual ::javax::realtime::ReleaseParameters *getReleaseParameters () { return releaseParam; }
  virtual void setReleaseParameters (::javax::realtime::ReleaseParameters *);
  virtual jboolean setReleaseParametersIfFeasible (::javax::realtime::ReleaseParameters *);
  virtual ::javax::realtime::Scheduler *getScheduler () { return scheduler; }
  virtual void setScheduler (::javax::realtime::Scheduler *);
  virtual void setScheduler (::javax::realtime::Scheduler *, ::javax::realtime::SchedulingParameters *, ::javax::realtime::ReleaseParameters *, ::javax::realtime::MemoryParameters *, ::javax::realtime::ProcessingGroupParameters *);
  virtual ::javax::realtime::SchedulingParameters *getSchedulingParameters () { return schedulingParam; }
  virtual void setSchedulingParameters (::javax::realtime::SchedulingParameters *);
  virtual jboolean setSchedulingParametersIfFeasible (::javax::realtime::SchedulingParameters *);
  virtual jboolean removeFromFeasibility ();
  virtual jint executionEligibility ();
public:  // actually protected
  ::javax::realtime::MemoryParameters * __attribute__((aligned(__alignof__( ::javax::realtime::AsyncEventHandler )))) memoryParam;
  ::javax::realtime::ReleaseParameters *releaseParam;
  ::javax::realtime::SchedulingParameters *schedulingParam;
  ::javax::realtime::MemoryArea *memoryArea;
  ::javax::realtime::ProcessingGroupParameters *groupParam;
  ::javax::realtime::Scheduler *scheduler;
  jboolean noHeap;
  ::java::lang::Runnable *logic;
  jint fireCount;
  ::javax::realtime::ThreadedAsyncEventHandler$HanderLogic *handlerLogic;
public:

  static ::java::lang::Class class$;
};

#endif /* __javax_realtime_ThreadedAsyncEventHandler__ */
