// DO NOT EDIT THIS FILE - it is machine generated -*- c++ -*-

#ifndef __gnu_java_nio_DatagramChannelImpl__
#define __gnu_java_nio_DatagramChannelImpl__

#pragma interface

#include <java/nio/channels/DatagramChannel.h>
#include <gcj/array.h>

extern "Java"
{
  namespace gnu
  {
    namespace java
    {
      namespace nio
      {
        class DatagramChannelImpl;
      }
    }
  }
  namespace java
  {
    namespace net
    {
      class DatagramSocket;
      class SocketAddress;
    }
    namespace nio
    {
      class ByteBuffer;
      namespace channels
      {
        class DatagramChannel;
        namespace spi
        {
          class SelectorProvider;
        }
      }
    }
  }
};

class ::gnu::java::nio::DatagramChannelImpl : public ::java::nio::channels::DatagramChannel
{
public:  // actually protected
  DatagramChannelImpl (::java::nio::channels::spi::SelectorProvider *);
  virtual void implCloseSelectableChannel () { }
  virtual void implConfigureBlocking (jboolean) { }
public:
  virtual jint write (::java::nio::ByteBuffer *);
  virtual jlong write (JArray< ::java::nio::ByteBuffer *> *, jint, jint);
  virtual jint read (::java::nio::ByteBuffer *);
  virtual ::java::nio::channels::DatagramChannel *connect (::java::net::SocketAddress *) { return 0; }
  virtual ::java::nio::channels::DatagramChannel *disconnect () { return 0; }
  virtual jboolean isConnected ();
  virtual jlong read (JArray< ::java::nio::ByteBuffer *> *, jint, jint);
  virtual ::java::net::SocketAddress *receive (::java::nio::ByteBuffer *) { return 0; }
  virtual jint send (::java::nio::ByteBuffer *, ::java::net::SocketAddress *);
  virtual ::java::net::DatagramSocket *socket () { return 0; }
public: // actually package-private
  jint __attribute__((aligned(__alignof__( ::java::nio::channels::DatagramChannel ))))  fd;
public:

  static ::java::lang::Class class$;
};

#endif /* __gnu_java_nio_DatagramChannelImpl__ */
