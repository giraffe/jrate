// DO NOT EDIT THIS FILE - it is machine generated -*- c++ -*-

#ifndef __gnu_java_nio_ByteBufferImpl__
#define __gnu_java_nio_ByteBufferImpl__

#pragma interface

#include <java/nio/ByteBuffer.h>
#include <gcj/array.h>

extern "Java"
{
  namespace java
  {
    namespace nio
    {
      class DoubleBuffer;
      class FloatBuffer;
      class LongBuffer;
      class IntBuffer;
      class ShortBuffer;
      class CharBuffer;
      class ByteBuffer;
    }
  }
  namespace gnu
  {
    namespace java
    {
      namespace nio
      {
        class ByteBufferImpl;
      }
    }
  }
};

class ::gnu::java::nio::ByteBufferImpl : public ::java::nio::ByteBuffer
{
public:
  ByteBufferImpl (jint, jint, jint);
  ByteBufferImpl (jbyteArray, jint, jint);
  ByteBufferImpl (::gnu::java::nio::ByteBufferImpl *);
public: // actually package-private
  void inc_pos (jint);
private:
  static jbyteArray nio_cast (jbyteArray);
  static jbyteArray nio_cast (jcharArray);
  static jbyteArray nio_cast (jshortArray);
  static jbyteArray nio_cast (jlongArray);
  static jbyteArray nio_cast (jintArray);
  static jbyteArray nio_cast (jfloatArray);
  static jbyteArray nio_cast (jdoubleArray);
public: // actually package-private
  ByteBufferImpl (jbyteArray);
private:
  static jbyte nio_get_Byte (::gnu::java::nio::ByteBufferImpl *, jint, jint);
  static void nio_put_Byte (::gnu::java::nio::ByteBufferImpl *, jint, jint, jbyte);
public:
  ::java::nio::ByteBuffer *asByteBuffer ();
public: // actually package-private
  ByteBufferImpl (jcharArray);
private:
  static jchar nio_get_Char (::gnu::java::nio::ByteBufferImpl *, jint, jint);
  static void nio_put_Char (::gnu::java::nio::ByteBufferImpl *, jint, jint, jchar);
public:
  ::java::nio::CharBuffer *asCharBuffer ();
public: // actually package-private
  ByteBufferImpl (jshortArray);
private:
  static jshort nio_get_Short (::gnu::java::nio::ByteBufferImpl *, jint, jint);
  static void nio_put_Short (::gnu::java::nio::ByteBufferImpl *, jint, jint, jshort);
public:
  ::java::nio::ShortBuffer *asShortBuffer ();
public: // actually package-private
  ByteBufferImpl (jintArray);
private:
  static jint nio_get_Int (::gnu::java::nio::ByteBufferImpl *, jint, jint);
  static void nio_put_Int (::gnu::java::nio::ByteBufferImpl *, jint, jint, jint);
public:
  ::java::nio::IntBuffer *asIntBuffer ();
public: // actually package-private
  ByteBufferImpl (jlongArray);
private:
  static jlong nio_get_Long (::gnu::java::nio::ByteBufferImpl *, jint, jint);
  static void nio_put_Long (::gnu::java::nio::ByteBufferImpl *, jint, jint, jlong);
public:
  ::java::nio::LongBuffer *asLongBuffer ();
public: // actually package-private
  ByteBufferImpl (jfloatArray);
private:
  static jfloat nio_get_Float (::gnu::java::nio::ByteBufferImpl *, jint, jint);
  static void nio_put_Float (::gnu::java::nio::ByteBufferImpl *, jint, jint, jfloat);
public:
  ::java::nio::FloatBuffer *asFloatBuffer ();
public: // actually package-private
  ByteBufferImpl (jdoubleArray);
private:
  static jdouble nio_get_Double (::gnu::java::nio::ByteBufferImpl *, jint, jint);
  static void nio_put_Double (::gnu::java::nio::ByteBufferImpl *, jint, jint, jdouble);
public:
  ::java::nio::DoubleBuffer *asDoubleBuffer ();
  jboolean isReadOnly () { return readOnly; }
  ::java::nio::ByteBuffer *slice ();
  ::java::nio::ByteBuffer *duplicate ();
  ::java::nio::ByteBuffer *asReadOnlyBuffer ();
  ::java::nio::ByteBuffer *compact () { return reinterpret_cast< ::java::nio::ByteBuffer *> (this); }
  jboolean isDirect ();
  jbyte get ();
  ::java::nio::ByteBuffer *put (jbyte);
  jbyte get (jint);
  ::java::nio::ByteBuffer *put (jint, jbyte);
  jchar getChar ();
  ::java::nio::ByteBuffer *putChar (jchar);
  jchar getChar (jint);
  ::java::nio::ByteBuffer *putChar (jint, jchar);
  jshort getShort ();
  ::java::nio::ByteBuffer *putShort (jshort);
  jshort getShort (jint);
  ::java::nio::ByteBuffer *putShort (jint, jshort);
  jint getInt ();
  ::java::nio::ByteBuffer *putInt (jint);
  jint getInt (jint);
  ::java::nio::ByteBuffer *putInt (jint, jint);
  jlong getLong ();
  ::java::nio::ByteBuffer *putLong (jlong);
  jlong getLong (jint);
  ::java::nio::ByteBuffer *putLong (jint, jlong);
  jfloat getFloat ();
  ::java::nio::ByteBuffer *putFloat (jfloat);
  jfloat getFloat (jint);
  ::java::nio::ByteBuffer *putFloat (jint, jfloat);
  jdouble getDouble ();
  ::java::nio::ByteBuffer *putDouble (jdouble);
  jdouble getDouble (jint);
  ::java::nio::ByteBuffer *putDouble (jint, jdouble);
private:
  jboolean __attribute__((aligned(__alignof__( ::java::nio::ByteBuffer ))))  readOnly;
public:

  static ::java::lang::Class class$;
};

#endif /* __gnu_java_nio_ByteBufferImpl__ */
